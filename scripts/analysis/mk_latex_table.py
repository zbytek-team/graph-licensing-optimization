from __future__ import annotations

import argparse
import csv
from pathlib import Path


def main() -> None:
    ap = argparse.ArgumentParser(description="Emit LaTeX table from aggregates.csv")
    ap.add_argument("--aggregates", required=True, help="path to aggregates.csv from tables_aggregates.py")
    ap.add_argument("--out", required=True, help="output .tex path")
    ap.add_argument("--caption", default="Zestawienie: koszt na wierzchołek i czas (średnia ± odch. std.)")
    ap.add_argument("--label", default="tab:aggregates_example")
    ap.add_argument("--cost_unit", default="$ / node", help="unit for cost_per_node, e.g. '$ / node' or '[-] / node'")
    args = ap.parse_args()

    rows: list[dict[str, str]] = []
    with open(args.aggregates, "r", encoding="utf-8", newline="") as f:
        reader = csv.DictReader(f)
        for r in reader:
            rows.append(r)

    lines: list[str] = []
    lines.append("% auto-generated by mk_latex_table.py")
    lines.append("\\begin{table}[H]")
    lines.append("\\centering")
    lines.append(f"\\caption{{{args.caption}}}")
    lines.append(f"\\label{{{args.label}}}")
    lines.append("\\begin{tabular}{@{}l l r r r r r r@{}}")
    lines.append("\\toprule")
    lines.append("Alg. & Graf & n & rep & cost$_{mean}$ [" + args.cost_unit + "] & cost$_{std}$ & time$_{mean}$ [ms] & time$_{std}$ \\\")
    lines.append("\\midrule")
    for r in rows[:200]:  # cap for safety
        alg = r.get("algorithm", "?")
        g = r.get("graph", "?")
        n = r.get("n_nodes", "?")
        rep = r.get("rep", "?")
        c_m = r.get("cost_mean", "?")
        c_s = r.get("cost_std", "?")
        t_m = r.get("time_ms_mean", "?")
        t_s = r.get("time_ms_std", "?")
        lines.append(f"{alg} & {g} & {n} & {rep} & {c_m} & {c_s} & {t_m} & {t_s} \\")
    lines.append("\\bottomrule")
    lines.append("\\end{tabular}")
    lines.append("\\end{table}")

    out_path = Path(args.out)
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text("\n".join(lines), encoding="utf-8")
    print(out_path)


if __name__ == "__main__":
    main()

